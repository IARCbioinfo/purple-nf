manifest {
    homePage = 'https://github.com/iarcbioinfo/facets-nf'
    description = 'Somatic Copy Number calls with FACETS'
    mainScript = 'main.nf'
    version  = '2.0'
    name = 'facets'
}

profiles {
  conda { process.conda = "$baseDir/environment.yml" }
  docker {
    docker.enabled = true
    process.container = 'iarcbioinfo/facets-nf:v2.0'
  }
  singularity {
    singularity.enabled = true
    process.container = 'iarcbioinfo/facets-nf:v2.0'
    singularity.autoMounts = true 	
  }
}


process {
    shell =  ['/bin/bash','-o','pipefail']
}



// Load job.conf for process tagging
includeConfig 'conf/jobs.conf'




params {

output_folder="./results"
//we init some parameters
ref = null
dbsnp_vcf_ref = null
tn_file = null
help = false
debug = false
cohort_dir = null
cram = false


tumor_dir = null
normal_dir = null
suffix_tumor = "_T"
suffix_normal = "_N"

//running parameters

snppileup_bin = "snp-pileup"
min_map_quality = 15
min_base_quality = 20
pseudo_snps =100
min_read_count = 20

//the default value is genome
analysis_type = "genome"
snp_nbhd = 1000
cval_preproc = 35
cval_proc1 = 150
cval_proc2 = 300
m_cval = true

//visualization parameters
output_pdf = true

// resource defaults
max_memory = 128.GB
max_cpus = 8
max_time = 240.h

}

timeline {
  enabled = true
  file = "${params.output_folder}/nf-pipeline_info/facets_timeline.html"
}

report {
  enabled = true
  file = "${params.output_folder}/nf-pipeline_info/facets_report.html"
}

trace {
  enabled = true
  file = "${params.output_folder}/nf-pipeline_info/facets_trace.txt"
}

dag {
  enabled = true
  file = "${params.output_folder}/nf-pipeline_info/facets_dag.html"

}



//Mesage regarding errors or complete
workflow.onComplete = {
    // any workflow property can be used here
    println "Pipeline complete"
    println "Command line: $workflow.commandLine"
}


workflow.onError = {
   println "Oops... Pipeline execution stopped with the following message: ${workflow.errorMessage}"
}



// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
